---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Deploy A11ygator Bot application.'

Parameters:
  ConsumerSecret:
    Type: 'String'
    Description: 'Consumer secret of Twitter application.'
    NoEcho: yes
  ApiLoggingLevel:
    Type: 'String'
    AllowedValues:
      - 'OFF'
      - 'ERROR'
      - 'INFO'
    Description: 'Logging level of API Gateway stage.'
    Default: 'ERROR'

Outputs:
  TwitterWebhookUrl:
    Description: 'URL of Twitter Webhook.'
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/webhook/twitter'

Resources:
  TweetsQueue:
    Type: 'AWS::SQS::Queue'

  ###########################################################
  ### Function to handle Twitter Challenge Response Check ###
  ###########################################################
  TwitterCrcRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'Lambda'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'WriteCloudWatchLogs'
                Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  TwitterCrcFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: '../lambda/crc'
      Description: !Sub 'Handle Twitter Challenge Response Check for ${AWS::StackName}.'
      Environment:
        Variables:
          CONSUMER_SECRET: !Ref 'ConsumerSecret'
      Handler: 'index.handler'
      Role: !GetAtt 'TwitterCrcRole.Arn'
      Runtime: 'nodejs8.10'
  TwitterCrcFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 'TwitterCrcFunction.Arn'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/GET/webhook/twitter'

  #################################################
  ### Function to handle Twitter webhook events ###
  #################################################
  TwitterWebhookRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'Lambda'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'WriteCloudWatchLogs'
                Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: 'SQS'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'EnqueueTweets'
                Effect: 'Allow'
                Action:
                  - 'sqs:SendMessage'
                Resource: !GetAtt 'TweetsQueue.Arn'
  TwitterWebhookFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: '../lambda/webhook'
      Description: !Sub 'Handle Twitter webhook events for ${AWS::StackName}.'
      Environment:
        Variables:
          SQS_QUEUE: !Ref 'TweetsQueue'
          CONSUMER_SECRET: !Ref 'ConsumerSecret'
      Handler: 'index.handler'
      Role: !GetAtt 'TwitterWebhookRole.Arn'
      Runtime: 'nodejs8.10'
      Timeout: 30
  TwitterWebhookFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 'TwitterWebhookFunction.Arn'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/POST/webhook/twitter'

  ###################
  ### API Gateway ###
  ###################
  Api:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Ref 'AWS::StackName'
      StageName: 'prod'
      EndpointConfiguration: 'REGIONAL'
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: '/*'
          LoggingLevel: !Ref 'ApiLoggingLevel'
      DefinitionBody:
        openapi: '3.0.0'
        schemes:
          - 'https'
        x-amazon-apigateway-request-validators:
          all:
            validateRequestBody: yes
            validateRequestParameters: yes
        paths:
          /webhook/twitter:
            get:
              description: !Sub 'Twitter Challenge Response Check endpoint for ${AWS::StackName}.'
              x-amazon-apigateway-request-validator: 'all'
              parameters:
                - in: 'query'
                  name: 'crc_token'
                  schema:
                    type: 'string'
                  description: 'Challenge Response Check token.'
                  required: yes
              responses:
                '200':
                  description: 'Challenge Response.'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/TwitterCrcResponse'
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                type: 'aws_proxy'
                httpMethod: 'POST'
                uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TwitterCrcFunction.Arn}/invocations'
            post:
              description: !Sub 'Webhook endpoint for ${AWS::StackName}.'
              x-amazon-apigateway-request-validator: 'all'
              parameters:
                - in: 'header'
                  name: 'X-Twitter-Webhooks-Signature'
                  schema:
                    type: 'string'
                  description: 'Twitter Webhook Signature.'
                  required: true
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TwitterWebhookRequest'
              responses:
                '204':
                  description: 'Acknowledged.'
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                type: 'aws_proxy'
                httpMethod: 'POST'
                uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TwitterWebhookFunction.Arn}/invocations'
        components:
          schemas:
            TwitterCrcResponse:
              type: 'object'
              properties:
                response_token:
                  type: 'string'
              required:
                - 'response_token'
              additionalProperties: no
            TwitterWebhookRequest:
              type: 'object'
